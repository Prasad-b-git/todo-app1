name: CI Pipeline

on:
  push:
    branches:
      - master  # Trigger the pipeline on push to the master branch
  pull_request:
    branches:
      - master  # Trigger the pipeline on pull request to the master branch

jobs:
  build:
    runs-on: ubuntu-latest  # Specify the VM to run the job on

    env:
      NODE_ENV: 'development'
      DOCKER_IMAGE: 'todo-app'
      DOCKER_TAG: ${{ github.run_number }}  # Use GitHub run number as the tag
      DOCKER_USERNAME: 'prasadsb'  # Your Docker Hub username

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js and install dependencies
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Specify the Node.js version, adjust if needed

    - name: Install dependencies
      run: |
        npm cache clean --force
        npm install

    # Step 3: Run tests
    - name: Run tests
      run: |
        sudo apt-get install -y fuser  # Install fuser to handle port killing
        fuser -k 3000/tcp || true  # Kill any process using port 3000
        npm test

    # Step 4: Build and run Docker container
    - name: Build and run Docker container
      run: |
        docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
        docker tag ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        
        # Stop and remove any existing container
        docker ps -q --filter "name=todo-app" | xargs -r docker stop
        docker ps -aq --filter "name=todo-app" | xargs -r docker rm
        
        # Run the new container
        docker run -d --name todo-app -p 3000:3000 ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

    # Step 5: Push Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # GitHub secret for Docker Hub username
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  # GitHub secret for Docker Hub password
      run: |
        echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest

    # Step 6: Send notification on failure
    - name: Send failure notification
      if: failure()  # Only run if the job fails
      run: |
        curl -X POST \
        -H 'Content-type: application/json' \
        --data '{"text":"Build failed: ${{ github.repository }} - Build # ${{ github.run_number }}. Check the build logs for more details: ${{ github.server_url }}/${{ github.repository }}/runs/${{ github.run_id }}"}'
